{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/hp/Projects/upspring/frontend/components/records/NewRecordForm.js\";\nimport { useMutation } from 'react-query';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './NewRecordForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\nfunction NewRecordForm(props) {\n  const {\n    record\n  } = props;\n  console.log(\"Record\", record);\n  const queryClient = useQueryClient();\n\n  const addRecord = async enteredMeetupData => {\n    if (enteredMeetupData.id === '') {\n      const response = await fetch('http://localhost:8080/users', {\n        method: 'POST',\n        body: JSON.stringify(enteredMeetupData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      queryClient.invalidateQueries(\"records\");\n      return data;\n    } else {\n      const response = await fetch('/api/edit-record', {\n        method: 'PUT',\n        body: JSON.stringify(enteredMeetupData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      queryClient.invalidateQueries(\"records\");\n      return data;\n    }\n  };\n\n  const mutation = useMutation(newRecord => addRecord(newRecord), {\n    mutationKey: \"insert\"\n  });\n  const {\n    isLoading,\n    isError,\n    error,\n    isSuccess\n  } = mutation;\n\n  function submitHandler(values) {\n    const meetupData = {\n      name: values.name,\n      from: values.from,\n      to: values.to,\n      id: record.id\n    };\n    mutation.mutate(meetupData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  const validate = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: record,\n      validationSchema: validate,\n      onSubmit: values => submitHandler(values),\n      enableReinitialize: true,\n      validateOnMount: true,\n      children: formik => /*#__PURE__*/_jsxDEV(Form, {\n        className: classes.form,\n        id: \"myForm\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          type: \"hidden\",\n          name: \"id\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"email\",\n            name: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"password\",\n            name: \"from\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.actions,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"Submit\",\n            disabled: !formik.isValid,\n            children: \"Sign up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"An error occurred: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }, this), isSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\nexport default NewRecordForm;","map":{"version":3,"sources":["/home/hp/Projects/upspring/frontend/components/records/NewRecordForm.js"],"names":["useMutation","Card","Formik","Form","classes","Yup","TextField","useQueryClient","NewRecordForm","props","record","console","log","queryClient","addRecord","enteredMeetupData","id","response","fetch","method","body","JSON","stringify","headers","data","json","invalidateQueries","mutation","newRecord","mutationKey","isLoading","isError","error","isSuccess","submitHandler","values","meetupData","name","from","to","mutate","form","document","getElementById","reset","validate","object","shape","email","string","max","required","password","formik","control","actions","isValid","message"],"mappings":"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","sourcesContent":["import { useMutation } from 'react-query';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './NewRecordForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\n\nfunction NewRecordForm(props) {\n  const { record } = props;\n  console.log(\"Record\", record)\n  const queryClient = useQueryClient();\n\n  const addRecord = async (enteredMeetupData) => {\n    if (enteredMeetupData.id === '') {\n      const response = await fetch('http://localhost:8080/users', {\n        method: 'POST',\n        body: JSON.stringify(enteredMeetupData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      queryClient.invalidateQueries(\"records\")\n      return data;\n\n    } else {\n      const response = await fetch('/api/edit-record', {\n        method: 'PUT',\n        body: JSON.stringify(enteredMeetupData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      queryClient.invalidateQueries(\"records\")\n      return data;\n    }\n  }\n\n  const mutation = useMutation((newRecord) => addRecord(newRecord), { mutationKey: \"insert\" });\n  const { isLoading, isError, error, isSuccess } = mutation;\n\n  function submitHandler(values) {\n    const meetupData = {\n      name: values.name,\n      from: values.from,\n      to: values.to,\n      id: record.id\n    };\n    mutation.mutate(meetupData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  const validate = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required'\n    )\n  });\n\n  return (\n    <Card>\n      <Formik\n        initialValues={record}\n        validationSchema={validate}\n        onSubmit={(values) => submitHandler(values)}\n        enableReinitialize\n        validateOnMount\n      >\n        {formik => (\n          <Form className={classes.form} id='myForm'>\n            <TextField type=\"hidden\" name=\"id\" />\n            <div className={classes.control}>\n              <label htmlFor='email'>Email</label>\n              <TextField type=\"email\" name=\"email\" />\n            </div>\n            <div className={classes.control}>\n              <label htmlFor='password'>Password</label>\n              <TextField type=\"password\" name=\"from\" />\n            </div>\n\n            <div className={classes.actions}>\n              <button type=\"Submit\" disabled={!formik.isValid}>Sign up</button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n      {isError && <div>An error occurred: {error.message}</div>}\n\n      {isLoading && <div>Loading...</div>}\n\n      {isSuccess && <div>success</div>}\n    </Card>\n  );\n}\n\nexport default NewRecordForm;\n"]},"metadata":{},"sourceType":"module"}