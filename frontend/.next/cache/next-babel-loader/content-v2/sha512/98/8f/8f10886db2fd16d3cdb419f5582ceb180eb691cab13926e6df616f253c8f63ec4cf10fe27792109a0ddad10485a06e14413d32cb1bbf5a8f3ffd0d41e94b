{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/hp/Projects/upspring/frontend/components/records/NewRecordForm.js\";\nimport { useMutation } from 'react-query';\nimport { Link, Router } from 'react-router-dom';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './NewRecordForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\nfunction NewRecordForm(props) {\n  const {\n    record\n  } = props;\n  console.log(\"Record\", record);\n  const queryClient = useQueryClient();\n\n  const addRecord = async enteredMeetupData => {\n    if (enteredMeetupData.id === '') {\n      const response = await fetch('http://localhost:8080/users', {\n        method: 'POST',\n        body: JSON.stringify(enteredMeetupData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      queryClient.invalidateQueries(\"records\");\n      return data;\n    } else {\n      const response = await fetch('http://localhost:8080/users', {\n        method: 'POST',\n        body: JSON.stringify(enteredMeetupData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      queryClient.invalidateQueries(\"records\");\n      return data;\n    }\n  };\n\n  const mutation = useMutation(newRecord => addRecord(newRecord), {\n    mutationKey: \"insert\"\n  });\n  const {\n    isLoading,\n    isError,\n    error,\n    isSuccess\n  } = mutation;\n\n  function submitHandler(values) {\n    const meetupData = {\n      email: values.email,\n      password: values.password,\n      id: record.id\n    };\n    mutation.mutate(meetupData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  const validate = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      children: [/*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: record,\n        validationSchema: validate,\n        onSubmit: values => submitHandler(values),\n        enableReinitialize: true,\n        validateOnMount: true,\n        children: formik => /*#__PURE__*/_jsxDEV(Form, {\n          className: classes.form,\n          id: \"myForm\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            type: \"hidden\",\n            name: \"id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"email\",\n              name: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"password\",\n              name: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.actions,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"Submit\",\n              disabled: !formik.isValid,\n              children: \"Sign up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Already have an Account?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: \"/login\",\n              children: \"login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"An error occurred: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 23\n      }, this), isSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"success\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\nexport default NewRecordForm;","map":{"version":3,"sources":["/home/hp/Projects/upspring/frontend/components/records/NewRecordForm.js"],"names":["useMutation","Link","Router","Card","Formik","Form","classes","Yup","TextField","useQueryClient","NewRecordForm","props","record","console","log","queryClient","addRecord","enteredMeetupData","id","response","fetch","method","body","JSON","stringify","headers","data","json","invalidateQueries","mutation","newRecord","mutationKey","isLoading","isError","error","isSuccess","submitHandler","values","meetupData","email","password","mutate","form","document","getElementById","reset","validate","object","shape","string","max","required","formik","control","actions","isValid","message"],"mappings":"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","sourcesContent":["import { useMutation } from 'react-query';\nimport { Link, Router } from 'react-router-dom';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './NewRecordForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\n\nfunction NewRecordForm(props) {\n  const { record } = props;\n  console.log(\"Record\", record)\n  const queryClient = useQueryClient();\n\n  const addRecord = async (enteredMeetupData) => {\n    if (enteredMeetupData.id === '') {\n      const response = await fetch('http://localhost:8080/users', {\n        method: 'POST',\n        body: JSON.stringify(enteredMeetupData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      queryClient.invalidateQueries(\"records\")\n      return data;\n\n    } else {\n      const response = await fetch('http://localhost:8080/users', {\n        method: 'POST',\n        body: JSON.stringify(enteredMeetupData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      queryClient.invalidateQueries(\"records\")\n      return data;\n    }\n  }\n\n  const mutation = useMutation((newRecord) => addRecord(newRecord), { mutationKey: \"insert\" });\n  const { isLoading, isError, error, isSuccess } = mutation;\n\n  function submitHandler(values) {\n    const meetupData = {\n      email: values.email,\n      password: values.password,\n\n      id: record.id\n    };\n    mutation.mutate(meetupData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  const validate = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required'\n    )\n  });\n\n  return (\n    <Router>\n      <Card>\n        <Formik\n          initialValues={record}\n          validationSchema={validate}\n          onSubmit={(values) => submitHandler(values)}\n          enableReinitialize\n          validateOnMount\n        >\n          {formik => (\n            <Form className={classes.form} id='myForm'>\n              <TextField type=\"hidden\" name=\"id\" />\n              <div className={classes.control}>\n                <label htmlFor='email'>Email</label>\n                <TextField type=\"email\" name=\"email\" />\n              </div>\n              <div className={classes.control}>\n                <label htmlFor='password'>Password</label>\n                <TextField type=\"password\" name=\"password\" />\n              </div>\n              <div className={classes.actions}>\n                <button type=\"Submit\" disabled={!formik.isValid}>Sign up</button>\n              </div>\n              <div className={classes.control}>\n                <h4>Already have an Account?</h4>\n                <Link to='/login'>login</Link>\n              </div>\n            </Form>\n          )}\n        </Formik>\n        {isError && <div>An error occurred: {error.message}</div>}\n\n        {isLoading && <div>Loading...</div>}\n\n        {isSuccess && <div>success</div>}\n      </Card>\n    </Router>\n  );\n}\n\nexport default NewRecordForm;\n"]},"metadata":{},"sourceType":"module"}