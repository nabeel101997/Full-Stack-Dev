{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/hp/Projects/upspring/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hp/Projects/upspring/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/hp/Projects/upspring/frontend/components/records/SignUPForm.js\",\n    _s = $RefreshSig$();\n\nimport { useMutation } from 'react-query';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './SignUpForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\nfunction SignUpForm() {\n  _s();\n\n  var _this = this;\n\n  var initialValues = {\n    firstName: '',\n    lasName: '',\n    email: '',\n    password: ''\n  };\n  var queryClient = useQueryClient();\n\n  var addRecord = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(enteredMeetupData) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('http://localhost:8080/users', {\n                method: 'POST',\n                body: JSON.stringify(enteredMeetupData),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context.sent;\n              queryClient.invalidateQueries(\"records\");\n              return _context.abrupt(\"return\", data);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function addRecord(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var mutation = useMutation(function (newRecord) {\n    return addRecord(newRecord);\n  }, {\n    mutationKey: \"signUp\"\n  });\n  var data = mutation.data,\n      isLoading = mutation.isLoading,\n      isError = mutation.isError,\n      error = mutation.error,\n      isSuccess = mutation.isSuccess;\n  console.log(\"mutation-data\", mutation.data);\n\n  function submitHandler(values) {\n    var meetupData = {\n      firstName: values.firstName,\n      lastName: values.lastName,\n      email: values.email,\n      password: values.password\n    };\n    mutation.mutate(meetupData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  var validate = Yup.object().shape({\n    firstName: Yup.string().min(2, \"Must be more then one character\").max(255).required('First Name is required'),\n    lastName: Yup.string().min(2, \"Must be more than 10 characters\").max(255),\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validate,\n      onSubmit: function onSubmit(values) {\n        return submitHandler(values);\n      },\n      enableReinitialize: true,\n      validateOnMount: true,\n      children: function children(formik) {\n        return /*#__PURE__*/_jsxDEV(Form, {\n          className: classes.form,\n          id: \"myForm\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"name\",\n              children: \"First Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"text\",\n              name: \"firstName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"name\",\n              children: \"Last Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"text\",\n              name: \"lastName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"email\",\n              name: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"password\",\n              name: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.actions,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"Submit\",\n              disabled: !formik.isValid,\n              children: \"Sign up\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: classes.h4,\n              children: \"Already have an Account?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(\"a\", {\n              className: classes.a,\n              href: \"/login\",\n              children: \"login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"An error occurred: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }, this), isSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SignUpForm, \"mUUakYvFQSudGRmMzZErOI9nuuc=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n\n_c = SignUpForm;\nexport default SignUpForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignUpForm\");","map":{"version":3,"sources":["/home/hp/Projects/upspring/frontend/components/records/SignUPForm.js"],"names":["useMutation","Card","Formik","Form","classes","Yup","TextField","useQueryClient","SignUpForm","initialValues","firstName","lasName","email","password","queryClient","addRecord","enteredMeetupData","fetch","method","body","JSON","stringify","headers","response","json","data","invalidateQueries","mutation","newRecord","mutationKey","isLoading","isError","error","isSuccess","console","log","submitHandler","values","meetupData","lastName","mutate","form","document","getElementById","reset","validate","object","shape","string","min","max","required","formik","control","actions","isValid","h4","a","message"],"mappings":";;;;;;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,cAAT,QAA+B,aAA/B;;AAGA,SAASC,UAAT,GAAsB;AAAA;;AAAA;;AAEpB,MAAMC,aAAa,GAAG;AACpBC,IAAAA,SAAS,EAAE,EADS;AAEpBC,IAAAA,OAAO,EAAE,EAFW;AAGpBC,IAAAA,KAAK,EAAE,EAHa;AAIpBC,IAAAA,QAAQ,EAAE;AAJU,GAAtB;AAMA,MAAMC,WAAW,GAAGP,cAAc,EAAlC;;AAEA,MAAMQ,SAAS;AAAA,wEAAG,iBAAOC,iBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACOC,KAAK,CAAC,6BAAD,EAAgC;AAC1DC,gBAAAA,MAAM,EAAE,MADkD;AAE1DC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,iBAAf,CAFoD;AAG1DM,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT;AAHiD,eAAhC,CADZ;;AAAA;AACVC,cAAAA,QADU;AAAA;AAAA,qBAQGA,QAAQ,CAACC,IAAT,EARH;;AAAA;AAQVC,cAAAA,IARU;AAShBX,cAAAA,WAAW,CAACY,iBAAZ,CAA8B,SAA9B;AATgB,+CAUTD,IAVS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATV,SAAS;AAAA;AAAA;AAAA,KAAf;;AAaA,MAAMY,QAAQ,GAAG3B,WAAW,CAAC,UAAC4B,SAAD;AAAA,WAAeb,SAAS,CAACa,SAAD,CAAxB;AAAA,GAAD,EAAsC;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAAtC,CAA5B;AAvBoB,MAwBZJ,IAxBY,GAwBmCE,QAxBnC,CAwBZF,IAxBY;AAAA,MAwBNK,SAxBM,GAwBmCH,QAxBnC,CAwBNG,SAxBM;AAAA,MAwBKC,OAxBL,GAwBmCJ,QAxBnC,CAwBKI,OAxBL;AAAA,MAwBcC,KAxBd,GAwBmCL,QAxBnC,CAwBcK,KAxBd;AAAA,MAwBqBC,SAxBrB,GAwBmCN,QAxBnC,CAwBqBM,SAxBrB;AAyBpBC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BR,QAAQ,CAACF,IAAtC;;AAEA,WAASW,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,QAAMC,UAAU,GAAG;AACjB5B,MAAAA,SAAS,EAAE2B,MAAM,CAAC3B,SADD;AAEjB6B,MAAAA,QAAQ,EAAEF,MAAM,CAACE,QAFA;AAGjB3B,MAAAA,KAAK,EAAEyB,MAAM,CAACzB,KAHG;AAIjBC,MAAAA,QAAQ,EAAEwB,MAAM,CAACxB;AAJA,KAAnB;AAOAc,IAAAA,QAAQ,CAACa,MAAT,CAAgBF,UAAhB;AACA,QAAIG,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAX;AACAF,IAAAA,IAAI,CAACG,KAAL;AACD;;AAED,MAAMC,QAAQ,GAAGxC,GAAG,CAACyC,MAAJ,GAAaC,KAAb,CAAmB;AAClCrC,IAAAA,SAAS,EAAEL,GAAG,CAAC2C,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,iCAApB,EAAuDC,GAAvD,CAA2D,GAA3D,EAAgEC,QAAhE,CAAyE,wBAAzE,CADuB;AAElCZ,IAAAA,QAAQ,EAAElC,GAAG,CAAC2C,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoB,iCAApB,EAAuDC,GAAvD,CAA2D,GAA3D,CAFwB;AAGlCtC,IAAAA,KAAK,EAAEP,GAAG,CAAC2C,MAAJ,GAAapC,KAAb,CAAmB,uBAAnB,EAA4CsC,GAA5C,CAAgD,GAAhD,EAAqDC,QAArD,CAA8D,mBAA9D,CAH2B;AAIlCtC,IAAAA,QAAQ,EAAER,GAAG,CAAC2C,MAAJ,GAAaE,GAAb,CAAiB,GAAjB,EAAsBC,QAAtB,CAA+B,sBAA/B;AAJwB,GAAnB,CAAjB;AAQA,sBACE,QAAC,IAAD;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE1C,aADjB;AAEE,MAAA,gBAAgB,EAAEoC,QAFpB;AAGE,MAAA,QAAQ,EAAE,kBAACR,MAAD;AAAA,eAAYD,aAAa,CAACC,MAAD,CAAzB;AAAA,OAHZ;AAIE,MAAA,kBAAkB,MAJpB;AAKE,MAAA,eAAe,MALjB;AAAA,gBAOG,kBAAAe,MAAM;AAAA,4BACL,QAAC,IAAD;AAAM,UAAA,SAAS,EAAEhD,OAAO,CAACqC,IAAzB;AAA+B,UAAA,EAAE,EAAC,QAAlC;AAAA,kCACE;AAAK,YAAA,SAAS,EAAErC,OAAO,CAACiD,OAAxB;AAAA,oCACE;AAAO,cAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,QAAC,SAAD;AAAW,cAAA,IAAI,EAAC,MAAhB;AAAuB,cAAA,IAAI,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,qBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAKE;AAAK,YAAA,SAAS,EAAEjD,OAAO,CAACiD,OAAxB;AAAA,oCACE;AAAO,cAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,QAAC,SAAD;AAAW,cAAA,IAAI,EAAC,MAAhB;AAAuB,cAAA,IAAI,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA,qBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,mBALF,eASE;AAAK,YAAA,SAAS,EAAEjD,OAAO,CAACiD,OAAxB;AAAA,oCACE;AAAO,cAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,QAAC,SAAD;AAAW,cAAA,IAAI,EAAC,OAAhB;AAAwB,cAAA,IAAI,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,qBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,mBATF,eAaE;AAAK,YAAA,SAAS,EAAEjD,OAAO,CAACiD,OAAxB;AAAA,oCACE;AAAO,cAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,QAAC,SAAD;AAAW,cAAA,IAAI,EAAC,UAAhB;AAA2B,cAAA,IAAI,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,qBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,mBAbF,eAiBE;AAAK,YAAA,SAAS,EAAEjD,OAAO,CAACkD,OAAxB;AAAA,mCACE;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,QAAQ,EAAE,CAACF,MAAM,CAACG,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,mBAjBF,eAoBE;AAAK,YAAA,SAAS,EAAEnD,OAAO,CAACiD,OAAxB;AAAA,oCACE;AAAI,cAAA,SAAS,EAAEjD,OAAO,CAACoD,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE;AAAG,cAAA,SAAS,EAAEpD,OAAO,CAACqD,CAAtB;AAAyB,cAAA,IAAI,EAAC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,mBApBF;AAAA;AAAA;AAAA;AAAA;AAAA,iBADK;AAAA;AAPT;AAAA;AAAA;AAAA;AAAA,YADF,EAoCG1B,OAAO,iBAAI;AAAA,wCAAyBC,KAAK,CAAC0B,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,YApCd,EAsCG5B,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAtChB,EAwCGG,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxChB,EA0CGR,IAAI,iBAAI;AAAA,gBAAMA,IAAI,CAACiC;AAAX;AAAA;AAAA;AAAA;AAAA,YA1CX;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8CD;;GA9FQlD,U;UAQaD,c,EAeHP,W;;;KAvBVQ,U;AAgGT,eAAeA,UAAf","sourcesContent":["import { useMutation } from 'react-query';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './SignUpForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\n\nfunction SignUpForm() {\n  \n  const initialValues = {\n    firstName: '',\n    lasName: '',\n    email: '',\n    password: '',\n  }\n  const queryClient = useQueryClient();\n\n  const addRecord = async (enteredMeetupData) => {\n    const response = await fetch('http://localhost:8080/users', {\n      method: 'POST',\n      body: JSON.stringify(enteredMeetupData),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    queryClient.invalidateQueries(\"records\");\n    return data;\n  }\n\n  const mutation = useMutation((newRecord) => addRecord(newRecord), { mutationKey: \"signUp\" });\n  const { data, isLoading, isError, error, isSuccess } = mutation;\n  console.log(\"mutation-data\", mutation.data);\n\n  function submitHandler(values) {\n    const meetupData = {\n      firstName: values.firstName,\n      lastName: values.lastName,\n      email: values.email,\n      password: values.password,\n\n    };\n    mutation.mutate(meetupData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  const validate = Yup.object().shape({\n    firstName: Yup.string().min(2, \"Must be more then one character\").max(255).required('First Name is required'),\n    lastName: Yup.string().min(2, \"Must be more than 10 characters\").max(255),\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required'\n    )\n  });\n\n  return (\n    <Card>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validate}\n        onSubmit={(values) => submitHandler(values)}\n        enableReinitialize\n        validateOnMount\n      >\n        {formik => (\n          <Form className={classes.form} id='myForm'>\n            <div className={classes.control}>\n              <label htmlFor='name'>First Name</label>\n              <TextField type=\"text\" name=\"firstName\" />\n            </div>\n            <div className={classes.control}>\n              <label htmlFor='name'>Last Name</label>\n              <TextField type=\"text\" name=\"lastName\" />\n            </div>\n            <div className={classes.control}>\n              <label htmlFor='email'>Email</label>\n              <TextField type=\"email\" name=\"email\" />\n            </div>\n            <div className={classes.control}>\n              <label htmlFor='password'>Password</label>\n              <TextField type=\"password\" name=\"password\" />\n            </div>\n            <div className={classes.actions}>\n              <button type=\"Submit\" disabled={!formik.isValid}>Sign up</button>\n            </div>\n            <div className={classes.control}>\n              <h4 className={classes.h4}>Already have an Account?</h4>\n              <a className={classes.a} href='/login'>login</a>\n            </div>\n          </Form>\n        )}\n      </Formik>\n      {isError && <div>An error occurred: {error.message}</div>}\n\n      {isLoading && <div>Loading...</div>}\n\n      {isSuccess && <div>success</div>}\n\n      {data && <div>{data.message}</div>}\n    </Card>\n  );\n}\n\nexport default SignUpForm;\n"]},"metadata":{},"sourceType":"module"}