{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/hp/Projects/upspring/frontend/components/records/RecordList.js\";\nimport { useMutation } from 'react-query';\nimport classes from './RecordList.module.css';\nimport swal from 'sweetalert';\nimport { useQueryClient } from 'react-query';\n\nfunction RecordList(props) {\n  var _props$records;\n\n  const queryClient = useQueryClient();\n\n  function editHandler(record) {\n    props.editRecod({\n      id: record._id,\n      name: record.name,\n      from: record.from,\n      to: record.to\n    });\n  }\n\n  async function deleteHandler(record) {\n    swal({\n      title: \"Are you sure?\",\n      text: \"Once deleted, you will not be able to recover this Record!\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true\n    }).then(async willDelete => {\n      if (willDelete) {\n        const response = await fetch('/api/delete-record', {\n          method: 'DELETE',\n          body: JSON.stringify(record),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        swal(\"Poof! Your Record has been deleted!\", {\n          icon: \"success\"\n        });\n        const data = await response.json();\n        queryClient.invalidateQueries(\"records\");\n        return data;\n      } else {\n        swal(\"Your Record is safe!\");\n      }\n    });\n  }\n\n  const mutation = useMutation(record => deleteHandler(record), {\n    mutationKey: \"delete\"\n  });\n  const {\n    isLoading,\n    isError,\n    error,\n    isSuccess\n  } = mutation;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"An error occurred: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }, this), isSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: classes.table,\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: classes.th,\n            children: \"University Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: classes.th,\n            children: \"From\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: classes.th,\n            children: \"To\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            className: classes.th,\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: (_props$records = props.records) === null || _props$records === void 0 ? void 0 : _props$records.map(record => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: classes.td,\n            children: record.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: classes.td,\n            children: record.from\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: classes.td,\n            children: record.to\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: classes.td,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: classes.button,\n              onClick: () => editHandler(record),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: (classes.button, classes.mr20),\n              onClick: () => mutation.mutate(record),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)]\n        }, record._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\nexport default RecordList;","map":{"version":3,"sources":["/home/hp/Projects/upspring/frontend/components/records/RecordList.js"],"names":["useMutation","classes","swal","useQueryClient","RecordList","props","queryClient","editHandler","record","editRecod","id","_id","name","from","to","deleteHandler","title","text","icon","buttons","dangerMode","then","willDelete","response","fetch","method","body","JSON","stringify","headers","data","json","invalidateQueries","mutation","mutationKey","isLoading","isError","error","isSuccess","message","table","th","records","map","td","button","mr20","mutate"],"mappings":"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","sourcesContent":["import { useMutation } from 'react-query';\nimport classes from './RecordList.module.css';\nimport swal from 'sweetalert';\nimport { useQueryClient } from 'react-query';\n\n\nfunction RecordList(props) {\n\n  const queryClient = useQueryClient();\n\n  function editHandler(record) {\n    props.editRecod({\n      id: record._id,\n      name: record.name,\n      from: record.from,\n      to: record.to,\n    });\n  }\n\n  async function deleteHandler(record) {\n    swal({\n      title: \"Are you sure?\",\n      text: \"Once deleted, you will not be able to recover this Record!\",\n      icon: \"warning\",\n      buttons: true,\n      dangerMode: true,\n    })\n      .then(async (willDelete) => {\n        if (willDelete) {\n          const response = await fetch('/api/delete-record', {\n            method: 'DELETE',\n            body: JSON.stringify(record),\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          });\n          swal(\"Poof! Your Record has been deleted!\", {\n            icon: \"success\",\n          });\n          const data = await response.json();\n          queryClient.invalidateQueries(\"records\")\n          return data;\n        } else {\n          swal(\"Your Record is safe!\");\n        }\n      });\n  }\n\n  const mutation = useMutation((record) => deleteHandler(record), { mutationKey: \"delete\" });\n  const { isLoading, isError, error, isSuccess } = mutation;\n\n  return (\n    <>\n      {isError && <div>An error occurred: {error.message}</div>}\n\n      {isLoading && <div>Loading...</div>}\n\n      {isSuccess && <div>success</div>}\n      <table className={classes.table}>\n        <thead>\n          <tr>\n            <th className={classes.th}>University Name</th>\n            <th className={classes.th} >From</th>\n            <th className={classes.th}>To</th>\n            <th className={classes.th}>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.records?.map((record) => (\n            <tr key={record._id}>\n              <td className={classes.td}>{record.name}</td>\n              <td className={classes.td}>{record.from}</td>\n              <td className={classes.td}>{record.to}</td>\n              <td className={classes.td}>\n                <button className={classes.button} onClick={() => editHandler(record)}>Edit</button>\n                <button className={classes.button, classes.mr20} onClick={() => mutation.mutate(record)}>Delete</button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n}\n\nexport default RecordList;\n"]},"metadata":{},"sourceType":"module"}