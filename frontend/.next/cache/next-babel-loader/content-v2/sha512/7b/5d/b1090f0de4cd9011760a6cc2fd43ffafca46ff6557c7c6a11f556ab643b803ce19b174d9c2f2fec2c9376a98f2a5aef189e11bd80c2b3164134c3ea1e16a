{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/hp/Projects/upspring/frontend/components/records/LoginForm.js\";\nimport { useMutation } from 'react-query';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './NewRecordForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\nfunction LoginForm() {\n  const initialValues = {\n    email: '',\n    password: ''\n  };\n  const queryClient = useQueryClient();\n\n  const userLogin = async loginData => {\n    const response = await fetch('http://localhost:8080/users/login', {\n      method: 'POST',\n      body: JSON.stringify(loginData),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    queryClient.invalidateQueries(\"records\");\n    return data;\n  };\n\n  const mutation = useMutation(newLogin => userLogin(newLogin), {\n    mutationKey: \"login\"\n  });\n  const {\n    data,\n    isLoading,\n    isError,\n    error,\n    isSuccess\n  } = mutation;\n  console.log(data);\n\n  function submitHandler(values) {\n    const loginData = {\n      email: values.email,\n      password: values.password\n    };\n    mutation.mutate(loginData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  const validate = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validate,\n      onSubmit: values => submitHandler(values),\n      enableReinitialize: true,\n      validateOnMount: true,\n      children: formik => /*#__PURE__*/_jsxDEV(Form, {\n        className: classes.form,\n        id: \"myForm\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          type: \"hidden\",\n          name: \"id\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"email\",\n            name: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"password\",\n            name: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.actions,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"Submit\",\n            disabled: !formik.isValid,\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 16\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.token\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["/home/hp/Projects/upspring/frontend/components/records/LoginForm.js"],"names":["useMutation","Card","Formik","Form","classes","Yup","TextField","useQueryClient","LoginForm","initialValues","email","password","queryClient","userLogin","loginData","response","fetch","method","body","JSON","stringify","headers","data","json","invalidateQueries","mutation","newLogin","mutationKey","isLoading","isError","error","isSuccess","console","log","submitHandler","values","mutate","form","document","getElementById","reset","validate","object","shape","string","max","required","formik","control","actions","isValid","message","token"],"mappings":"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","sourcesContent":["import { useMutation } from 'react-query';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './NewRecordForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\n\nfunction LoginForm() {\n\n  const initialValues = {\n    email: '',\n    password: '',\n  }\n  const queryClient = useQueryClient();\n\n  const userLogin = async (loginData) => {\n    const response = await fetch('http://localhost:8080/users/login', {\n      method: 'POST',\n      body: JSON.stringify(loginData),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    queryClient.invalidateQueries(\"records\")\n    return data;\n  }\n\n  const mutation = useMutation((newLogin) => userLogin(newLogin), { mutationKey: \"login\" });\n  const { data, isLoading, isError, error, isSuccess } = mutation;\n  console.log(data);\n\n  function submitHandler(values) {\n    const loginData = {\n      email: values.email,\n      password: values.password,\n    };\n    mutation.mutate(loginData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  const validate = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required'\n    )\n  });\n\n  return (\n    <Card>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validate}\n        onSubmit={(values) => submitHandler(values)}\n        enableReinitialize\n        validateOnMount\n      >\n        {formik => (\n          <Form className={classes.form} id='myForm'>\n            <TextField type=\"hidden\" name=\"id\" />\n            <div className={classes.control}>\n              <label htmlFor='email'>Email</label>\n              <TextField type=\"email\" name=\"email\" />\n            </div>\n            <div className={classes.control}>\n              <label htmlFor='password'>Password</label>\n              <TextField type=\"password\" name=\"password\" />\n            </div>\n            <div className={classes.actions}>\n              <button type=\"Submit\" disabled={!formik.isValid}>Login</button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n      {data && <div>{data.message}</div>}\n      {data && <div>{data.token}</div>}\n    </Card>\n  );\n}\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}