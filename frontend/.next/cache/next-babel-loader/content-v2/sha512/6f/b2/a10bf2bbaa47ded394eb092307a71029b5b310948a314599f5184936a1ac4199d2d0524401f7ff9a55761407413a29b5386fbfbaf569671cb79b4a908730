{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/hp/Projects/upspring/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hp/Projects/upspring/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/hp/Projects/upspring/frontend/components/records/LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useContext } from 'react';\nimport AuthContext from '../../store/auth-context';\nimport { useMutation } from 'react-query';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './NewRecordForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\nfunction LoginForm() {\n  _s();\n\n  var _this = this;\n\n  var authCtx = useContext(AuthContext);\n\n  var _useState = useState(true),\n      isLogin = _useState[0],\n      setIsLogin = _useState[1];\n\n  var initialValues = {\n    email: '',\n    password: ''\n  };\n  var queryClient = useQueryClient();\n\n  var addRecord = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(enteredMeetupData) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('http://localhost:8080/users/login', {\n                method: 'POST',\n                body: JSON.stringify(enteredMeetupData),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context.sent;\n              queryClient.invalidateQueries(\"records\");\n              return _context.abrupt(\"return\", data);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function addRecord(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var mutation = useMutation(function (newRecord) {\n    return addRecord(newRecord);\n  }, {\n    mutationKey: \"login\"\n  });\n  var data = mutation.data,\n      isLoading = mutation.isLoading,\n      isError = mutation.isError,\n      error = mutation.error,\n      isSuccess = mutation.isSuccess;\n  authCtx.login(data === null || data === void 0 ? void 0 : data.accessToken);\n  console.log(\"login data\", mutation.data);\n\n  function submitHandler(values) {\n    var meetupData = {\n      email: values.email,\n      password: values.password\n    };\n    mutation.mutate(meetupData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  var validate = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validate,\n      onSubmit: function onSubmit(values) {\n        return submitHandler(values);\n      },\n      enableReinitialize: true,\n      validateOnMount: true,\n      children: function children(formik) {\n        return /*#__PURE__*/_jsxDEV(Form, {\n          className: classes.form,\n          id: \"myForm\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            type: \"hidden\",\n            name: \"id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"email\",\n              name: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"password\",\n              name: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.actions,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"Submit\",\n              disabled: !formik.isValid,\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 16\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginForm, \"P/LTTUlIBpeQRhdBYQ/Mb2hqwlM=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/home/hp/Projects/upspring/frontend/components/records/LoginForm.js"],"names":["useState","useRef","useContext","AuthContext","useMutation","Card","Formik","Form","classes","Yup","TextField","useQueryClient","LoginForm","authCtx","isLogin","setIsLogin","initialValues","email","password","queryClient","addRecord","enteredMeetupData","fetch","method","body","JSON","stringify","headers","response","json","data","invalidateQueries","mutation","newRecord","mutationKey","isLoading","isError","error","isSuccess","login","accessToken","console","log","submitHandler","values","meetupData","mutate","form","document","getElementById","reset","validate","object","shape","string","max","required","formik","control","actions","isValid","message"],"mappings":"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","sourcesContent":["import { useState, useRef, useContext } from 'react';\nimport AuthContext from '../../store/auth-context';\nimport { useMutation } from 'react-query';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './NewRecordForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\n\nfunction LoginForm() {\n\n  const authCtx = useContext(AuthContext);\n  const [isLogin, setIsLogin] = useState(true);\n\n  const initialValues = {\n    email: '',\n    password: '',\n  }\n  const queryClient = useQueryClient();\n\n  const addRecord = async (enteredMeetupData) => {\n\n    const response = await fetch('http://localhost:8080/users/login', {\n      method: 'POST',\n      body: JSON.stringify(enteredMeetupData),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    queryClient.invalidateQueries(\"records\")\n    return data;\n  }\n\n  const mutation = useMutation((newRecord) => addRecord(newRecord), { mutationKey: \"login\" });\n  const { data, isLoading, isError, error, isSuccess } = mutation;\n  authCtx.login(data?.accessToken);\n  \n  console.log(\"login data\",mutation.data);\n\n  function submitHandler(values) {\n    const meetupData = {\n      email: values.email,\n      password: values.password,\n    };\n    mutation.mutate(meetupData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  const validate = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required'\n    )\n  });\n\n  return (\n    <Card>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validate}\n        onSubmit={(values) => submitHandler(values)}\n        enableReinitialize\n        validateOnMount\n      >\n        {formik => (\n          <Form className={classes.form} id='myForm'>\n            <TextField type=\"hidden\" name=\"id\" />\n            <div className={classes.control}>\n              <label htmlFor='email'>Email</label>\n              <TextField type=\"email\" name=\"email\" />\n            </div>\n            <div className={classes.control}>\n              <label htmlFor='password'>Password</label>\n              <TextField type=\"password\" name=\"password\" />\n            </div>\n            <div className={classes.actions}>\n              <button type=\"Submit\" disabled={!formik.isValid}>Login</button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n      {data && <div>{data.message}</div>}\n      {data && <div>{data.email}</div>}\n    </Card>\n  );\n}\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}