{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/hp/Projects/upspring/frontend/components/records/LoginForm.js\";\nimport { useState, useRef, useContext } from 'react';\nimport AuthContext from '../../store/auth-context';\nimport { useMutation } from 'react-query';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './NewRecordForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\nfunction LoginForm() {\n  const authCtx = useContext(AuthContext);\n  const {\n    0: isLogin,\n    1: setIsLogin\n  } = useState(true);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin(prevState => !prevState);\n  };\n\n  const initialValues = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: ''\n  };\n  const queryClient = useQueryClient();\n\n  const addRecord = async enteredMeetupData => {\n    let url;\n\n    if (isLogin) {\n      url = 'http://localhost:8080/users/login';\n    } else {\n      url = 'http://localhost:8080/users';\n    }\n\n    const response = await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(enteredMeetupData),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    queryClient.invalidateQueries(\"records\");\n    return data;\n  };\n\n  const mutation = useMutation(newRecord => addRecord(newRecord), {\n    mutationKey: \"login\"\n  });\n  const {\n    data,\n    isLoading,\n    isError,\n    error,\n    isSuccess\n  } = mutation;\n  authCtx.login(data === null || data === void 0 ? void 0 : data.accessToken);\n  console.log(\"login data\", mutation.data);\n\n  function submitHandler(values) {\n    const meetupData = {\n      firstName: values.firstName,\n      lastName: values.lastName,\n      email: values.email,\n      password: values.password\n    };\n    mutation.mutate(meetupData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  const validate = Yup.object().shape({\n    firstName: Yup.string().min(2, \"Must be more then one character\").max(255).required('First Name is required'),\n    lastName: Yup.string().min(2, \"Must be more than 10 characters\").max(255),\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validate,\n      onSubmit: values => submitHandler(values),\n      enableReinitialize: true,\n      validateOnMount: true,\n      children: formik => /*#__PURE__*/_jsxDEV(Form, {\n        className: classes.form,\n        id: \"myForm\",\n        children: [isLogin ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"name\",\n              children: \"First Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"text\",\n              name: \"firstName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"name\",\n              children: \"Last Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"text\",\n              name: \"lastName\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \" \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 24\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"email\",\n            name: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.control,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"password\",\n            name: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.actions,\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"Submit\",\n            disabled: !formik.isValid,\n            children: isLogin ? 'Login' : 'Create Account'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: classes.toggle,\n            onClick: switchAuthModeHandler,\n            children: isLogin ? 'Create new account' : 'Login with existing account'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 16\n    }, this), data && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: data.email\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 16\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\nexport default LoginForm;","map":{"version":3,"sources":["/home/hp/Projects/upspring/frontend/components/records/LoginForm.js"],"names":["useState","useRef","useContext","AuthContext","useMutation","Card","Formik","Form","classes","Yup","TextField","useQueryClient","LoginForm","authCtx","isLogin","setIsLogin","switchAuthModeHandler","prevState","initialValues","firstName","lastName","email","password","queryClient","addRecord","enteredMeetupData","url","response","fetch","method","body","JSON","stringify","headers","data","json","invalidateQueries","mutation","newRecord","mutationKey","isLoading","isError","error","isSuccess","login","accessToken","console","log","submitHandler","values","meetupData","mutate","form","document","getElementById","reset","validate","object","shape","string","min","max","required","formik","control","actions","isValid","toggle","message"],"mappings":"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","sourcesContent":["import { useState, useRef, useContext } from 'react';\nimport AuthContext from '../../store/auth-context';\nimport { useMutation } from 'react-query';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './NewRecordForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\n\nfunction LoginForm() {\n\n  const authCtx = useContext(AuthContext);\n  const [isLogin, setIsLogin] = useState(true);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const initialValues = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n  }\n  const queryClient = useQueryClient();\n\n  const addRecord = async (enteredMeetupData) => {\n    let url;\n    if (isLogin) {\n      url = 'http://localhost:8080/users/login';\n    } else {\n      url = 'http://localhost:8080/users';\n    }\n    const response = await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(enteredMeetupData),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    queryClient.invalidateQueries(\"records\")\n    return data;\n  }\n\n  const mutation = useMutation((newRecord) => addRecord(newRecord), { mutationKey: \"login\" });\n  const { data, isLoading, isError, error, isSuccess } = mutation;\n  authCtx.login(data?.accessToken);\n\n  console.log(\"login data\", mutation.data);\n\n  function submitHandler(values) {\n    const meetupData = {\n      firstName: values.firstName,\n      lastName: values.lastName,\n      email: values.email,\n      password: values.password,\n\n    };\n    mutation.mutate(meetupData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  const validate = Yup.object().shape({\n    firstName: Yup.string().min(2, \"Must be more then one character\").max(255).required('First Name is required'),\n    lastName: Yup.string().min(2, \"Must be more than 10 characters\").max(255),\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required'\n    )\n  });\n\n  return (\n    <Card>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validate}\n        onSubmit={(values) => submitHandler(values)}\n        enableReinitialize\n        validateOnMount\n      >\n        {formik => (\n          <Form className={classes.form} id='myForm'>\n            {isLogin ?\n              <div>\n                <div className={classes.control}>\n                  <label htmlFor='name'>First Name</label>\n                  <TextField type=\"text\" name=\"firstName\" />\n                </div>\n                <div className={classes.control}>\n                  <label htmlFor='name'>Last Name</label>\n                  <TextField type=\"text\" name=\"lastName\" />\n                </div>\n              </div> : <div> </div>}\n            <div className={classes.control}>\n              <label htmlFor='email'>Email</label>\n              <TextField type=\"email\" name=\"email\" />\n            </div>\n            <div className={classes.control}>\n              <label htmlFor='password'>Password</label>\n              <TextField type=\"password\" name=\"password\" />\n            </div>\n            <div className={classes.actions}>\n              <button type=\"Submit\" disabled={!formik.isValid}>{isLogin ? 'Login' : 'Create Account'}</button>\n\n              <button\n                type='button'\n                className={classes.toggle}\n                onClick={switchAuthModeHandler}\n              >\n                {isLogin ? 'Create new account' : 'Login with existing account'}\n              </button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n      {data && <div>{data.message}</div>}\n      {data && <div>{data.email}</div>}\n    </Card>\n  );\n}\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}