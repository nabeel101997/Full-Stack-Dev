{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/hp/Projects/upspring/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hp/Projects/upspring/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/hp/Projects/upspring/frontend/components/records/LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport { useMutation, useQueryClient } from 'react-query';\nimport AuthContext from '../../store/auth-context';\nimport { toast } from 'react-toastify';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport { useRouter } from 'next/router';\nimport classes from './LoginForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction LoginForm() {\n  _s();\n\n  var _this = this;\n\n  var authCtx = useContext(AuthContext);\n  var router = useRouter();\n  var initialValues = {\n    email: '',\n    password: ''\n  };\n  var queryClient = useQueryClient();\n\n  var userLogin = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(loginData) {\n      var response, data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('http://localhost:8080/users/login', {\n                method: 'POST',\n                body: JSON.stringify(loginData),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              data = _context.sent;\n              queryClient.invalidateQueries(\"records\");\n              return _context.abrupt(\"return\", data);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function userLogin(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var mutation = useMutation(function (newLogin) {\n    return userLogin(newLogin);\n  }, {\n    mutationKey: \"login\"\n  });\n  var data = mutation.data,\n      isLoading = mutation.isLoading,\n      isError = mutation.isError,\n      error = mutation.error,\n      isSuccess = mutation.isSuccess;\n  toast(data === null || data === void 0 ? void 0 : data.message);\n\n  if ((data === null || data === void 0 ? void 0 : data.status) === 200) {\n    authCtx.login(data === null || data === void 0 ? void 0 : data.accessToken);\n    window.localStorage.setItem(\"accessToken\", data === null || data === void 0 ? void 0 : data.accessToken);\n    router.push('/profile');\n  }\n\n  function submitHandler(values) {\n    var loginData = {\n      email: values.email,\n      password: values.password\n    };\n    mutation.mutate(loginData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  var validate = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      validationSchema: validate,\n      onSubmit: function onSubmit(values) {\n        return submitHandler(values);\n      },\n      enableReinitialize: true,\n      validateOnMount: true,\n      children: function children(formik) {\n        return /*#__PURE__*/_jsxDEV(Form, {\n          className: classes.form,\n          id: \"myForm\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            type: \"hidden\",\n            name: \"id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"email\",\n              name: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"password\",\n              name: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.actions,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"Submit\",\n              disabled: !formik.isValid,\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.display,\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: classes.h4,\n              children: \"Don't have an Account?\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(\"a\", {\n              className: classes.a,\n              href: \"/\",\n              children: \"SignUp\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginForm, \"n9KSgHlNITWEtTVztibIbsegqlE=\", false, function () {\n  return [useRouter, useQueryClient, useMutation];\n});\n\n_c = LoginForm;\nexport default LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["/home/hp/Projects/upspring/frontend/components/records/LoginForm.js"],"names":["useMutation","useQueryClient","AuthContext","toast","Card","Formik","Form","useRouter","classes","Yup","TextField","LoginForm","authCtx","useContext","router","initialValues","email","password","queryClient","userLogin","loginData","fetch","method","body","JSON","stringify","headers","response","json","data","invalidateQueries","mutation","newLogin","mutationKey","isLoading","isError","error","isSuccess","message","status","login","accessToken","window","localStorage","setItem","push","submitHandler","values","mutate","form","document","getElementById","reset","validate","object","shape","string","max","required","formik","control","actions","isValid","display","h4","a"],"mappings":";;;;;;;AAAA,SAASA,WAAT,EAAsBC,cAAtB,QAA4C,aAA5C;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,uCAAP;;AAGA,SAASC,SAAT,GAAqB;AAAA;;AAAA;;AAEnB,MAAMC,OAAO,GAAGC,UAAU,CAACX,WAAD,CAA1B;AAEA,MAAMY,MAAM,GAAGP,SAAS,EAAxB;AAEA,MAAMQ,aAAa,GAAG;AACpBC,IAAAA,KAAK,EAAE,EADa;AAEpBC,IAAAA,QAAQ,EAAE;AAFU,GAAtB;AAIA,MAAMC,WAAW,GAAGjB,cAAc,EAAlC;;AAEA,MAAMkB,SAAS;AAAA,wEAAG,iBAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACOC,KAAK,CAAC,mCAAD,EAAsC;AAChEC,gBAAAA,MAAM,EAAE,MADwD;AAEhEC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,SAAf,CAF0D;AAGhEM,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT;AAHuD,eAAtC,CADZ;;AAAA;AACVC,cAAAA,QADU;AAAA;AAAA,qBAQGA,QAAQ,CAACC,IAAT,EARH;;AAAA;AAQVC,cAAAA,IARU;AAShBX,cAAAA,WAAW,CAACY,iBAAZ,CAA8B,SAA9B;AATgB,+CAUTD,IAVS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATV,SAAS;AAAA;AAAA;AAAA,KAAf;;AAaA,MAAMY,QAAQ,GAAG/B,WAAW,CAAC,UAACgC,QAAD;AAAA,WAAcb,SAAS,CAACa,QAAD,CAAvB;AAAA,GAAD,EAAoC;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAApC,CAA5B;AAzBmB,MA0BXJ,IA1BW,GA0BoCE,QA1BpC,CA0BXF,IA1BW;AAAA,MA0BLK,SA1BK,GA0BoCH,QA1BpC,CA0BLG,SA1BK;AAAA,MA0BMC,OA1BN,GA0BoCJ,QA1BpC,CA0BMI,OA1BN;AAAA,MA0BeC,KA1Bf,GA0BoCL,QA1BpC,CA0BeK,KA1Bf;AAAA,MA0BsBC,SA1BtB,GA0BoCN,QA1BpC,CA0BsBM,SA1BtB;AA2BnBlC,EAAAA,KAAK,CAAC0B,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAES,OAAP,CAAL;;AACA,MAAI,CAAAT,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEU,MAAN,MAAiB,GAArB,EAA0B;AACxB3B,IAAAA,OAAO,CAAC4B,KAAR,CAAcX,IAAd,aAAcA,IAAd,uBAAcA,IAAI,CAAEY,WAApB;AACAC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,aAA5B,EAA2Cf,IAA3C,aAA2CA,IAA3C,uBAA2CA,IAAI,CAAEY,WAAjD;AACA3B,IAAAA,MAAM,CAAC+B,IAAP,CAAY,UAAZ;AACD;;AAED,WAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,QAAM3B,SAAS,GAAG;AAChBJ,MAAAA,KAAK,EAAE+B,MAAM,CAAC/B,KADE;AAEhBC,MAAAA,QAAQ,EAAE8B,MAAM,CAAC9B;AAFD,KAAlB;AAIAc,IAAAA,QAAQ,CAACiB,MAAT,CAAgB5B,SAAhB;AACA,QAAI6B,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAX;AACAF,IAAAA,IAAI,CAACG,KAAL;AACD;;AAED,MAAMC,QAAQ,GAAG5C,GAAG,CAAC6C,MAAJ,GAAaC,KAAb,CAAmB;AAClCvC,IAAAA,KAAK,EAAEP,GAAG,CAAC+C,MAAJ,GAAaxC,KAAb,CAAmB,uBAAnB,EAA4CyC,GAA5C,CAAgD,GAAhD,EAAqDC,QAArD,CAA8D,mBAA9D,CAD2B;AAElCzC,IAAAA,QAAQ,EAAER,GAAG,CAAC+C,MAAJ,GAAaC,GAAb,CAAiB,GAAjB,EAAsBC,QAAtB,CAA+B,sBAA/B;AAFwB,GAAnB,CAAjB;AAMA,sBACE,QAAC,IAAD;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAE3C,aADjB;AAEE,MAAA,gBAAgB,EAAEsC,QAFpB;AAGE,MAAA,QAAQ,EAAE,kBAACN,MAAD;AAAA,eAAYD,aAAa,CAACC,MAAD,CAAzB;AAAA,OAHZ;AAIE,MAAA,kBAAkB,MAJpB;AAKE,MAAA,eAAe,MALjB;AAAA,gBAOG,kBAAAY,MAAM;AAAA,4BACL,QAAC,IAAD;AAAM,UAAA,SAAS,EAAEnD,OAAO,CAACyC,IAAzB;AAA+B,UAAA,EAAE,EAAC,QAAlC;AAAA,kCACE,QAAC,SAAD;AAAW,YAAA,IAAI,EAAC,QAAhB;AAAyB,YAAA,IAAI,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAK,YAAA,SAAS,EAAEzC,OAAO,CAACoD,OAAxB;AAAA,oCACE;AAAO,cAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,QAAC,SAAD;AAAW,cAAA,IAAI,EAAC,OAAhB;AAAwB,cAAA,IAAI,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,qBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,eAME;AAAK,YAAA,SAAS,EAAEpD,OAAO,CAACoD,OAAxB;AAAA,oCACE;AAAO,cAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,QAAC,SAAD;AAAW,cAAA,IAAI,EAAC,UAAhB;AAA2B,cAAA,IAAI,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,qBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,mBANF,eAUE;AAAK,YAAA,SAAS,EAAEpD,OAAO,CAACqD,OAAxB;AAAA,mCACE;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,QAAQ,EAAE,CAACF,MAAM,CAACG,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,mBAVF,eAaE;AAAK,YAAA,SAAS,EAAEtD,OAAO,CAACuD,OAAxB;AAAA,oCACE;AAAI,cAAA,SAAS,EAAEvD,OAAO,CAACwD,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE;AAAG,cAAA,SAAS,EAAExD,OAAO,CAACyD,CAAtB;AAAyB,cAAA,IAAI,EAAC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,mBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,iBADK;AAAA;AAPT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD;;GAlFQtD,S;UAIQJ,S,EAMKN,c,EAeHD,W;;;KAzBVW,S;AAoFT,eAAeA,SAAf","sourcesContent":["import { useMutation, useQueryClient } from 'react-query';\nimport AuthContext from '../../store/auth-context';\nimport { toast } from 'react-toastify';\nimport Card from '../ui/Card';\nimport { Formik, Form } from 'formik';\nimport { useRouter } from 'next/router';\nimport classes from './LoginForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nfunction LoginForm() {\n\n  const authCtx = useContext(AuthContext);\n\n  const router = useRouter();\n\n  const initialValues = {\n    email: '',\n    password: '',\n  }\n  const queryClient = useQueryClient();\n\n  const userLogin = async (loginData) => {\n    const response = await fetch('http://localhost:8080/users/login', {\n      method: 'POST',\n      body: JSON.stringify(loginData),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    queryClient.invalidateQueries(\"records\")\n    return data;\n  }\n\n  const mutation = useMutation((newLogin) => userLogin(newLogin), { mutationKey: \"login\" });\n  const { data, isLoading, isError, error, isSuccess } = mutation;\n  toast(data?.message);\n  if (data?.status === 200) {\n    authCtx.login(data?.accessToken);\n    window.localStorage.setItem(\"accessToken\", data?.accessToken);\n    router.push('/profile')\n  }\n\n  function submitHandler(values) {\n    const loginData = {\n      email: values.email,\n      password: values.password,\n    };\n    mutation.mutate(loginData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  const validate = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required'\n    )\n  });\n\n  return (\n    <Card>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validate}\n        onSubmit={(values) => submitHandler(values)}\n        enableReinitialize\n        validateOnMount\n      >\n        {formik => (\n          <Form className={classes.form} id='myForm'>\n            <TextField type=\"hidden\" name=\"id\" />\n            <div className={classes.control}>\n              <label htmlFor='email'>Email</label>\n              <TextField type=\"email\" name=\"email\" />\n            </div>\n            <div className={classes.control}>\n              <label htmlFor='password'>Password</label>\n              <TextField type=\"password\" name=\"password\" />\n            </div>\n            <div className={classes.actions}>\n              <button type=\"Submit\" disabled={!formik.isValid}>Login</button>\n            </div>\n            <div className={classes.display}>\n              <h4 className={classes.h4}>Don't have an Account?</h4>\n              <a className={classes.a} href='/'>SignUp</a>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </Card>\n  );\n}\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}