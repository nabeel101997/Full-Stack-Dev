{"ast":null,"code":"import { MongoClient } from 'mongodb';\nconst uri = process.env.MONGODB_URI;\nconst options = {\n  useUnifiedTopology: true,\n  useNewUrlParser: true\n};\nlet client;\nlet clientPromise;\n\nif (!process.env.MONGODB_URI) {\n  throw new Error('Please add your Mongo URI to .env.local');\n}\n\nif (true) {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  if (!global._mongoClientPromise) {\n    client = new MongoClient(uri, options);\n    global._mongoClientPromise = client.connect();\n  }\n\n  clientPromise = global._mongoClientPromise;\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(uri, options);\n  clientPromise = client.connect();\n} // Export a module-scoped MongoClient promise. By doing this in a\n// separate module, the client can be shared across functions.\n\n\nexport default clientPromise;","map":{"version":3,"sources":["/home/hp/Projects/upspring/frontend/lib/mongodb.js"],"names":["MongoClient","uri","process","env","MONGODB_URI","options","useUnifiedTopology","useNewUrlParser","client","clientPromise","Error","global","_mongoClientPromise","connect"],"mappings":"AAAA,SAASA,WAAT,QAA4B,SAA5B;AAEA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAAxB;AACA,MAAMC,OAAO,GAAG;AACdC,EAAAA,kBAAkB,EAAE,IADN;AAEdC,EAAAA,eAAe,EAAE;AAFH,CAAhB;AAKA,IAAIC,MAAJ;AACA,IAAIC,aAAJ;;AAEA,IAAI,CAACP,OAAO,CAACC,GAAR,CAAYC,WAAjB,EAA8B;AAC5B,QAAM,IAAIM,KAAJ,CAAU,yCAAV,CAAN;AACD;;AAED,UAA4C;AAC1C;AACA;AACA,MAAI,CAACC,MAAM,CAACC,mBAAZ,EAAiC;AAC/BJ,IAAAA,MAAM,GAAG,IAAIR,WAAJ,CAAgBC,GAAhB,EAAqBI,OAArB,CAAT;AACAM,IAAAA,MAAM,CAACC,mBAAP,GAA6BJ,MAAM,CAACK,OAAP,EAA7B;AACD;;AACDJ,EAAAA,aAAa,GAAGE,MAAM,CAACC,mBAAvB;AACD,CARD,MAQO;AACL;AACAJ,EAAAA,MAAM,GAAG,IAAIR,WAAJ,CAAgBC,GAAhB,EAAqBI,OAArB,CAAT;AACAI,EAAAA,aAAa,GAAGD,MAAM,CAACK,OAAP,EAAhB;AACD,C,CAED;AACA;;;AACA,eAAeJ,aAAf","sourcesContent":["import { MongoClient } from 'mongodb'\n\nconst uri = process.env.MONGODB_URI\nconst options = {\n  useUnifiedTopology: true,\n  useNewUrlParser: true,\n}\n\nlet client\nlet clientPromise\n\nif (!process.env.MONGODB_URI) {\n  throw new Error('Please add your Mongo URI to .env.local')\n}\n\nif (process.env.NODE_ENV === 'development') {\n  // In development mode, use a global variable so that the value\n  // is preserved across module reloads caused by HMR (Hot Module Replacement).\n  if (!global._mongoClientPromise) {\n    client = new MongoClient(uri, options)\n    global._mongoClientPromise = client.connect()\n  }\n  clientPromise = global._mongoClientPromise\n} else {\n  // In production mode, it's best to not use a global variable.\n  client = new MongoClient(uri, options)\n  clientPromise = client.connect()\n}\n\n// Export a module-scoped MongoClient promise. By doing this in a\n// separate module, the client can be shared across functions.\nexport default clientPromise\n"]},"metadata":{},"sourceType":"module"}