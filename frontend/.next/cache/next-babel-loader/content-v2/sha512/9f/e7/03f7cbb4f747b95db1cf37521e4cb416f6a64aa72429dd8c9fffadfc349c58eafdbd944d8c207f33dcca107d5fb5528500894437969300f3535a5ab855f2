{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/hp/Projects/upspring/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/hp/Projects/upspring/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/hp/Projects/upspring/frontend/pages/login.js\",\n    _s = $RefreshSig$();\n\nimport { useMutation } from 'react-query';\nimport Card from '../components/ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './NewRecordForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\nfunction NewRecordForm(props) {\n  _s();\n\n  var _this = this;\n\n  var record = props.record;\n  var queryClient = useQueryClient();\n\n  var addRecord = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(enteredMeetupData) {\n      var response, data, _response, _data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(enteredMeetupData.id === '')) {\n                _context.next = 11;\n                break;\n              }\n\n              _context.next = 3;\n              return fetch('http://localhost:8080/users', {\n                method: 'POST',\n                body: JSON.stringify(enteredMeetupData),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 3:\n              response = _context.sent;\n              _context.next = 6;\n              return response.json();\n\n            case 6:\n              data = _context.sent;\n              queryClient.invalidateQueries(\"records\");\n              return _context.abrupt(\"return\", data);\n\n            case 11:\n              _context.next = 13;\n              return fetch('http://localhost:8080/users', {\n                method: 'POST',\n                body: JSON.stringify(enteredMeetupData),\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              });\n\n            case 13:\n              _response = _context.sent;\n              _context.next = 16;\n              return _response.json();\n\n            case 16:\n              _data = _context.sent;\n              queryClient.invalidateQueries(\"records\");\n              return _context.abrupt(\"return\", _data);\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function addRecord(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var mutation = useMutation(function (newRecord) {\n    return addRecord(newRecord);\n  }, {\n    mutationKey: \"insert\"\n  });\n  var isLoading = mutation.isLoading,\n      isError = mutation.isError,\n      error = mutation.error,\n      isSuccess = mutation.isSuccess;\n\n  function submitHandler(values) {\n    var meetupData = {\n      email: values.email,\n      password: values.password,\n      id: record.id\n    };\n    mutation.mutate(meetupData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  var validate = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required')\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: record,\n      validationSchema: validate,\n      onSubmit: function onSubmit(values) {\n        return submitHandler(values);\n      },\n      enableReinitialize: true,\n      validateOnMount: true,\n      children: function children(formik) {\n        return /*#__PURE__*/_jsxDEV(Form, {\n          className: classes.form,\n          id: \"myForm\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            type: \"hidden\",\n            name: \"id\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"email\",\n              name: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.control,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"password\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(TextField, {\n              type: \"password\",\n              name: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.actions,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"Submit\",\n              disabled: !formik.isValid,\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, _this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, _this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), isError && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"An error occurred: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }, this), isSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"success\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NewRecordForm, \"mUUakYvFQSudGRmMzZErOI9nuuc=\", false, function () {\n  return [useQueryClient, useMutation];\n});\n\n_c = NewRecordForm;\nexport default NewRecordForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewRecordForm\");","map":{"version":3,"sources":["/home/hp/Projects/upspring/frontend/pages/login.js"],"names":["useMutation","Card","Formik","Form","classes","Yup","TextField","useQueryClient","NewRecordForm","props","record","queryClient","addRecord","enteredMeetupData","id","fetch","method","body","JSON","stringify","headers","response","json","data","invalidateQueries","mutation","newRecord","mutationKey","isLoading","isError","error","isSuccess","submitHandler","values","meetupData","email","password","mutate","form","document","getElementById","reset","validate","object","shape","string","max","required","formik","control","actions","isValid","message"],"mappings":";;;;;;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,cAAT,QAA+B,aAA/B;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA;;AAAA;;AAAA,MACpBC,MADoB,GACTD,KADS,CACpBC,MADoB;AAE5B,MAAMC,WAAW,GAAGJ,cAAc,EAAlC;;AAEA,MAAMK,SAAS;AAAA,wEAAG,iBAAOC,iBAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACZA,iBAAiB,CAACC,EAAlB,KAAyB,EADb;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAESC,KAAK,CAAC,6BAAD,EAAgC;AAC1DC,gBAAAA,MAAM,EAAE,MADkD;AAE1DC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,iBAAf,CAFoD;AAG1DO,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT;AAHiD,eAAhC,CAFd;;AAAA;AAERC,cAAAA,QAFQ;AAAA;AAAA,qBASKA,QAAQ,CAACC,IAAT,EATL;;AAAA;AASRC,cAAAA,IATQ;AAUdZ,cAAAA,WAAW,CAACa,iBAAZ,CAA8B,SAA9B;AAVc,+CAWPD,IAXO;;AAAA;AAAA;AAAA,qBAcSR,KAAK,CAAC,6BAAD,EAAgC;AAC1DC,gBAAAA,MAAM,EAAE,MADkD;AAE1DC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,iBAAf,CAFoD;AAG1DO,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT;AAHiD,eAAhC,CAdd;;AAAA;AAcRC,cAAAA,SAdQ;AAAA;AAAA,qBAqBKA,SAAQ,CAACC,IAAT,EArBL;;AAAA;AAqBRC,cAAAA,KArBQ;AAsBdZ,cAAAA,WAAW,CAACa,iBAAZ,CAA8B,SAA9B;AAtBc,+CAuBPD,KAvBO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATX,SAAS;AAAA;AAAA;AAAA,KAAf;;AA2BA,MAAMa,QAAQ,GAAGzB,WAAW,CAAC,UAAC0B,SAAD;AAAA,WAAed,SAAS,CAACc,SAAD,CAAxB;AAAA,GAAD,EAAsC;AAAEC,IAAAA,WAAW,EAAE;AAAf,GAAtC,CAA5B;AA/B4B,MAgCpBC,SAhCoB,GAgCqBH,QAhCrB,CAgCpBG,SAhCoB;AAAA,MAgCTC,OAhCS,GAgCqBJ,QAhCrB,CAgCTI,OAhCS;AAAA,MAgCAC,KAhCA,GAgCqBL,QAhCrB,CAgCAK,KAhCA;AAAA,MAgCOC,SAhCP,GAgCqBN,QAhCrB,CAgCOM,SAhCP;;AAkC5B,WAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,QAAMC,UAAU,GAAG;AACjBC,MAAAA,KAAK,EAAEF,MAAM,CAACE,KADG;AAEjBC,MAAAA,QAAQ,EAAEH,MAAM,CAACG,QAFA;AAIjBtB,MAAAA,EAAE,EAAEJ,MAAM,CAACI;AAJM,KAAnB;AAMAW,IAAAA,QAAQ,CAACY,MAAT,CAAgBH,UAAhB;AACA,QAAII,IAAI,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAX;AACAF,IAAAA,IAAI,CAACG,KAAL;AACD;;AAED,MAAMC,QAAQ,GAAGrC,GAAG,CAACsC,MAAJ,GAAaC,KAAb,CAAmB;AAClCT,IAAAA,KAAK,EAAE9B,GAAG,CAACwC,MAAJ,GAAaV,KAAb,CAAmB,uBAAnB,EAA4CW,GAA5C,CAAgD,GAAhD,EAAqDC,QAArD,CAA8D,mBAA9D,CAD2B;AAElCX,IAAAA,QAAQ,EAAE/B,GAAG,CAACwC,MAAJ,GAAaC,GAAb,CAAiB,GAAjB,EAAsBC,QAAtB,CAA+B,sBAA/B;AAFwB,GAAnB,CAAjB;AAMA,sBACE,QAAC,IAAD;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,aAAa,EAAErC,MADjB;AAEE,MAAA,gBAAgB,EAAEgC,QAFpB;AAGE,MAAA,QAAQ,EAAE,kBAACT,MAAD;AAAA,eAAYD,aAAa,CAACC,MAAD,CAAzB;AAAA,OAHZ;AAIE,MAAA,kBAAkB,MAJpB;AAKE,MAAA,eAAe,MALjB;AAAA,gBAOG,kBAAAe,MAAM;AAAA,4BACL,QAAC,IAAD;AAAM,UAAA,SAAS,EAAE5C,OAAO,CAACkC,IAAzB;AAA+B,UAAA,EAAE,EAAC,QAAlC;AAAA,kCACE,QAAC,SAAD;AAAW,YAAA,IAAI,EAAC,QAAhB;AAAyB,YAAA,IAAI,EAAC;AAA9B;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAK,YAAA,SAAS,EAAElC,OAAO,CAAC6C,OAAxB;AAAA,oCACE;AAAO,cAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,QAAC,SAAD;AAAW,cAAA,IAAI,EAAC,OAAhB;AAAwB,cAAA,IAAI,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,qBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,eAME;AAAK,YAAA,SAAS,EAAE7C,OAAO,CAAC6C,OAAxB;AAAA,oCACE;AAAO,cAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE,QAAC,SAAD;AAAW,cAAA,IAAI,EAAC,UAAhB;AAA2B,cAAA,IAAI,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,qBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,mBANF,eAUE;AAAK,YAAA,SAAS,EAAE7C,OAAO,CAAC8C,OAAxB;AAAA,mCACE;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,QAAQ,EAAE,CAACF,MAAM,CAACG,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,mBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,iBADK;AAAA;AAPT;AAAA;AAAA;AAAA;AAAA,YADF,EAyBGtB,OAAO,iBAAI;AAAA,wCAAyBC,KAAK,CAACsB,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBd,EA2BGxB,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA3BhB,EA6BGG,SAAS,iBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA7BhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD;;GArFQvB,a;UAEaD,c,EA6BHP,W;;;KA/BVQ,a;AAuFT,eAAeA,aAAf","sourcesContent":["import { useMutation } from 'react-query';\nimport Card from '../components/ui/Card';\nimport { Formik, Form } from 'formik';\nimport classes from './NewRecordForm.module.css';\nimport * as Yup from 'yup';\nimport { TextField } from './TextField';\nimport { useQueryClient } from 'react-query';\n\n\nfunction NewRecordForm(props) {\n  const { record } = props;\n  const queryClient = useQueryClient();\n\n  const addRecord = async (enteredMeetupData) => {\n    if (enteredMeetupData.id === '') {\n      const response = await fetch('http://localhost:8080/users', {\n        method: 'POST',\n        body: JSON.stringify(enteredMeetupData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      queryClient.invalidateQueries(\"records\")\n      return data;\n\n    } else {\n      const response = await fetch('http://localhost:8080/users', {\n        method: 'POST',\n        body: JSON.stringify(enteredMeetupData),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const data = await response.json();\n      queryClient.invalidateQueries(\"records\")\n      return data;\n    }\n  }\n\n  const mutation = useMutation((newRecord) => addRecord(newRecord), { mutationKey: \"insert\" });\n  const { isLoading, isError, error, isSuccess } = mutation;\n\n  function submitHandler(values) {\n    const meetupData = {\n      email: values.email,\n      password: values.password,\n\n      id: record.id\n    };\n    mutation.mutate(meetupData);\n    var form = document.getElementById(\"myForm\");\n    form.reset();\n  }\n\n  const validate = Yup.object().shape({\n    email: Yup.string().email('Must be a valid email').max(255).required('Email is required'),\n    password: Yup.string().max(255).required('Password is required'\n    )\n  });\n\n  return (\n    <Card>\n      <Formik\n        initialValues={record}\n        validationSchema={validate}\n        onSubmit={(values) => submitHandler(values)}\n        enableReinitialize\n        validateOnMount\n      >\n        {formik => (\n          <Form className={classes.form} id='myForm'>\n            <TextField type=\"hidden\" name=\"id\" />\n            <div className={classes.control}>\n              <label htmlFor='email'>Email</label>\n              <TextField type=\"email\" name=\"email\" />\n            </div>\n            <div className={classes.control}>\n              <label htmlFor='password'>Password</label>\n              <TextField type=\"password\" name=\"password\" />\n            </div>\n            <div className={classes.actions}>\n              <button type=\"Submit\" disabled={!formik.isValid}>Login</button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n      {isError && <div>An error occurred: {error.message}</div>}\n\n      {isLoading && <div>Loading...</div>}\n\n      {isSuccess && <div>success</div>}\n    </Card>\n  );\n}\n\nexport default NewRecordForm;\n"]},"metadata":{},"sourceType":"module"}